-- create database and schemas
CREATE DATABASE IF NOT EXISTS MOVIE_DB;
CREATE SCHEMA IF NOT EXISTS STAGE;
CREATE SCHEMA IF NOT EXISTS PROD;

-- create tables

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_AWARDS_RAW
(
MOVIE_ID VARCHAR(30),
WINS INT,
NOMINATIONS INT,
LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_AWARDS
(
MOVIE_ID VARCHAR(30),
WINS INT,
NOMINATIONS INT,
LOAD_TIMESTAMP TIMESTAMP,
update_timestamp timestamp,
PRIMARY KEY (MOVIE_ID)
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_MOVIE_DETAILS_RAW
(
   MOVIE_ID VARCHAR(30),
   TITLE VARCHAR(255),
   CONTENT_RATING VARCHAR(10),
   RELEASE_DATE DATE,
   RUNTIME_MIN FLOAT,
   GENRE VARCHAR(255),
   PLOT VARCHAR(),
   LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_MOVIE_DETAILS
(
   MOVIE_ID VARCHAR(30),
   TITLE VARCHAR(255),
   CONTENT_RATING VARCHAR(10),
   RELEASE_DATE DATE,
   RUNTIME_MIN FLOAT,
   GENRE VARCHAR(255),
   PLOT VARCHAR (),
   LOAD_TIMESTAMP TIMESTAMP,
   PRIMARY KEY (MOVIE_ID)
   
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_RATING_RAW
(
    MOVIE_ID VARCHAR(30),
    METASCORE FLOAT,
    IMDB_RATING FLOAT,
    LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_RATING
(
    MOVIE_ID VARCHAR(30),
    METASCORE FLOAT,
    IMDB_RATING FLOAT,
    LOAD_TIMESTAMP TIMESTAMP,
    update_timestamp timestamp,
    PRIMARY KEY (MOVIE_ID)
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_ACTOR_RAW
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    ACTOR_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_ACTOR
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    ACTOR_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP,
    PRIMARY KEY (MOVIE_ID, ACTOR_ID)
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_DIRECTOR_RAW
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    DIRECTOR_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_DIRECTOR
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    DIRECTOR_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP,
    PRIMARY KEY (MOVIE_ID, DIRECTOR_ID)
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.DIM_WRITER_RAW
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    WRITER_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.DIM_WRITER
(
    MOVIE_ID VARCHAR(30),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    WRITER_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP,
    PRIMARY KEY (MOVIE_ID, WRITER_ID)
);

CREATE OR REPLACE TABLE MOVIE_DB.STAGE.FACT_MOVIE_RAW
(
    MOVIE_ID VARCHAR(30),
    IMDB_VOTES FLOAT,
    BOX_OFFICE VARCHAR(50),
    DIRECTOR_ID VARCHAR(30),
    ACTOR_ID VARCHAR(30),
    WRITER_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP
);

CREATE OR REPLACE TABLE MOVIE_DB.PROD.FACT_MOVIE
(
    MOVIE_ID VARCHAR(30),
    IMDB_VOTES FLOAT,
    BOX_OFFICE VARCHAR(50),
    DIRECTOR_ID VARCHAR(30),
    ACTOR_ID VARCHAR(30),
    WRITER_ID VARCHAR(30),
    LOAD_TIMESTAMP TIMESTAMP,
    update_timestamp timestamp,
    PRIMARY KEY (MOVIE_ID, DIRECTOR_ID, WRITER_ID,ACTOR_ID),
    FOREIGN KEY (MOVIE_ID, DIRECTOR_ID) REFERENCES PROD.DIM_DIRECTOR(MOVIE_ID,DIRECTOR_ID),
    FOREIGN KEY (MOVIE_ID, ACTOR_ID) REFERENCES PROD.DIM_ACTOR(MOVIE_ID,ACTOR_ID),
    FOREIGN KEY (MOVIE_ID, WRITER_ID) REFERENCES PROD.DIM_WRITER(MOVIE_ID,WRITER_ID),
    FOREIGN KEY (MOVIE_ID) REFERENCES PROD.DIM_MOVIE_DETAILS(MOVIE_ID),
    FOREIGN KEY (MOVIE_ID) REFERENCES PROD.DIM_AWARDS(MOVIE_ID),
    FOREIGN KEY (MOVIE_ID) REFERENCES PROD.DIM_RATING(MOVIE_ID)
    );

-- create storage integration 
CREATE STORAGE INTEGRATION IF NOT EXISTS s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = 'S3'
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::982534358450:role/snowflake-movie-db-s3-connect'
STORAGE_ALLOWED_LOCATIONS = ('s3://movies-etl-project-at/transformed_data/')
    COMMENT = 'S3 CONNECTION INITIALIZED';

--DESC STORAGE INTEGRATION S3_INT;

-- create file format
CREATE SCHEMA IF NOT EXISTS MOVIE_DB.FILE_FORMATS;

CREATE FILE FORMAT IF NOT EXISTS MOVIE_DB.FILE_FORMATS.CSV_FILE_FORMAT
TYPE = CSV
FIELD_DELIMITER = ';'
SKIP_HEADER = 1 ;

-- create stage
CREATE SCHEMA IF NOT EXISTS MOVIE_DB.EXTERNAL_STAGES;

CREATE STAGE IF NOT EXISTS MOVIE_DB.EXTERNAL_STAGES.AWS_STAGE
URL = 's3://movies-etl-project-at/transformed_data/'
STORAGE_INTEGRATION = S3_INT
FILE_FORMAT = MOVIE_DB.FILE_FORMATS.CSV_FILE_FORMAT;

--DESC STAGE MOVIE_DB.EXTERNAL_STAGES.AWS_STAGE;
--LIST @MOVIE_DB.EXTERNAL_STAGES.AWS_STAGE;






